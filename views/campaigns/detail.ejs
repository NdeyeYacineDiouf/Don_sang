<style>
  /* CSS spécifique pour la page de détail campagne */
  
  .detail-container {
      max-width: 1000px;
      margin: 0 auto;
      padding: 2rem;
      background-color: #fdf2f8;
      min-height: 70vh;
  }

  .breadcrumb {
      display: flex;
      align-items: center;
      margin-bottom: 2rem;
      color: #718096;
      text-decoration: none;
      font-size: 0.9rem;
      transition: color 0.3s ease;
  }

  .breadcrumb:hover {
      color: #dc3545;
      text-decoration: none;
  }

  .breadcrumb::before {
      content: "←";
      margin-right: 0.5rem;
      font-weight: bold;
  }

  .campaign-header {
      background: white;
      padding: 2rem;
      border-radius: 1rem;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
      margin-bottom: 2rem;
  }

  .campaign-title {
      color: #2d3748;
      font-size: 2.5rem;
      font-weight: 700;
      margin-bottom: 1.5rem;
      display: flex;
      align-items: center;
      gap: 1rem;
  }

  .campaign-badge {
      padding: 0.5rem 1rem;
      border-radius: 1rem;
      font-size: 0.75rem;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      background: #fee2e2;
      color: #dc2626;
      border: 1px solid #fecaca;
  }

  .campaign-info {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      margin-bottom: 2rem;
  }

  .info-item {
      display: flex;
      align-items: flex-start;
      color: #4a5568;
      font-size: 1rem;
      padding: 0.75rem 0;
      border-bottom: 1px solid #f1f5f9;
  }

  .info-item:last-child {
      border-bottom: none;
  }

  .info-label {
      font-weight: 600;
      margin-right: 0.5rem;
      color: #2d3748;
      min-width: 100px;
      flex-shrink: 0;
  }

  .campaign-map {
      background: white;
      padding: 2rem;
      border-radius: 1rem;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
      margin-bottom: 2rem;
  }

  .map-container {
      margin-top: 1rem;
      border-radius: 0.5rem;
      overflow: hidden;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }

  .slots-section {
      background: white;
      padding: 2rem;
      border-radius: 1rem;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
      margin-bottom: 2rem;
  }

  .slots-title {
      color: #2d3748;
      font-size: 1.5rem;
      font-weight: 700;
      margin-bottom: 2rem;
  }

  .day-section {
      margin-bottom: 2rem;
  }

  .day-header {
      display: flex;
      align-items: center;
      margin-bottom: 1.5rem;
      padding-bottom: 0.75rem;
      border-bottom: 2px solid #f1f5f9;
  }

  .day-icon {
      width: 1.5rem;
      height: 1.5rem;
      color: #dc3545;
      margin-right: 0.75rem;
  }

  .day-title {
      color: #2d3748;
      font-size: 1.25rem;
      font-weight: 600;
      margin: 0;
  }

  .slots-grid {
      display: grid;
      gap: 1rem;
  }

  .slot-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 1.25rem;
      background: #f8fafc;
      border: 2px solid #e2e8f0;
      border-radius: 0.75rem;
      transition: all 0.3s ease;
  }

  .slot-item:hover {
      border-color: #cbd5e0;
      background: #f1f5f9;
  }

  .slot-info {
      display: flex;
      align-items: center;
      flex: 1;
  }

  .time-icon {
      width: 1.25rem;
      height: 1.25rem;
      color: #dc3545;
      margin-right: 1rem;
  }

  .slot-time {
      font-weight: 600;
      color: #2d3748;
      font-size: 1rem;
      margin-right: 2rem;
  }

  .slot-availability {
      color: #718096;
      font-style: italic;
      font-size: 0.9rem;
  }

  .slot-availability.full {
      color: #e53e3e;
  }

  .slot-button {
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 0.5rem;
      font-weight: 600;
      font-size: 0.9rem;
      cursor: pointer;
      transition: all 0.3s ease;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      min-width: 100px;
  }

  .btn-reserve {
      background: #dc3545;
      color: white;
  }

  .btn-reserve:hover {
      background: #c82333;
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(220, 53, 69, 0.3);
      color: white;
      text-decoration: none;
  }

  .btn-full {
      background: #e2e8f0;
      color: #64748b;
      cursor: not-allowed;
  }

  .btn-full:hover {
      transform: none;
      box-shadow: none;
  }

  .back-section {
      text-align: center;
      margin-top: 3rem;
  }

  .back-button {
      display: inline-flex;
      align-items: center;
      padding: 0.75rem 2rem;
      background: white;
      color: #2d3748;
      border: 2px solid #e2e8f0;
      border-radius: 0.75rem;
      text-decoration: none;
      font-weight: 600;
      transition: all 0.3s ease;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }

  .back-button:hover {
      background: #f7fafc;
      border-color: #cbd5e0;
      color: #2d3748;
      text-decoration: none;
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
  }

  .back-button::before {
      content: "←";
      margin-right: 0.5rem;
      font-weight: bold;
  }

  .empty-slots {
      text-align: center;
      padding: 3rem 2rem;
      color: #718096;
  }

  .empty-slots-icon {
      width: 3rem;
      height: 3rem;
      margin: 0 auto 1rem;
      color: #cbd5e0;
  }

  /* Animation d'apparition */
  .campaign-header {
      animation: fadeInUp 0.6s ease-out;
  }

  .slots-section {
      animation: fadeInUp 0.6s ease-out 0.1s;
      animation-fill-mode: both;
  }

  .slot-item {
      animation: fadeInUp 0.4s ease-out;
  }

  .slot-item:nth-child(2) { animation-delay: 0.1s; }
  .slot-item:nth-child(3) { animation-delay: 0.2s; }
  .slot-item:nth-child(4) { animation-delay: 0.3s; }
  .slot-item:nth-child(5) { animation-delay: 0.4s; }
  .slot-item:nth-child(6) { animation-delay: 0.5s; }
  .slot-item:nth-child(7) { animation-delay: 0.6s; }

  @keyframes fadeInUp {
      from {
          opacity: 0;
          transform: translateY(30px);
      }
      to {
          opacity: 1;
          transform: translateY(0);
      }
  }

  /* Responsive */
  @media (max-width: 768px) {
      .detail-container {
          padding: 1rem;
      }

      .campaign-header,
      .slots-section {
          padding: 1.5rem;
      }

      .campaign-title {
          font-size: 2rem;
          flex-direction: column;
          align-items: flex-start;
          gap: 0.5rem;
      }

      .info-item {
          flex-direction: column;
          align-items: flex-start;
          gap: 0.5rem;
      }

      .info-label {
          min-width: auto;
      }

      .campaign-map {
          padding: 1.5rem;
      }

      .slot-item {
          flex-direction: column;
          align-items: flex-start;
          gap: 1rem;
      }

      .slot-info {
          width: 100%;
      }

      .slot-button {
          width: 100%;
      }
  }

  @media (max-width: 480px) {
      .campaign-title {
          font-size: 1.75rem;
      }
      
      .slots-title {
          font-size: 1.25rem;
      }
  }
</style>

<div class="detail-container">
  <a href="/api/campaigns" class="breadcrumb">Retour à la liste</a>
  
  <div class="campaign-header">
      <h1 class="campaign-title">
          <%= campaign.title %>
          <% if (campaign.urgent) { %>
              <span class="campaign-badge">Urgent</span>
          <% } %>
      </h1>
      
      <div class="campaign-info">
          <div class="info-item">
              <span class="info-label">Description :</span>
              <%= campaign.description %>
          </div>
          <div class="info-item">
              <span class="info-label">Lieu :</span>
              <%= campaign.location %>
          </div>
          <div class="info-item">
              <span class="info-label">Date :</span>
              du <%= campaign.startDate.toLocaleDateString('fr-FR') %> au <%= campaign.endDate.toLocaleDateString('fr-FR') %>
          </div>
          <div class="info-item">
              <span class="info-label">Horaire :</span>
              <%= campaign.startTime %> - <%= campaign.endTime %>
          </div>
      </div>

      <% if (campaign.locationDetails && campaign.locationDetails.coordinates.lat && campaign.locationDetails.coordinates.lng) { %>
      <div class="campaign-map">
          <h3 style="color: #2d3748; font-size: 1.25rem; font-weight: 600; margin-bottom: 1rem; display: flex; align-items: center; gap: 0.5rem;">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                  <circle cx="12" cy="10" r="3"></circle>
              </svg>
              Localisation
          </h3>
          <div class="map-container">
              <div id="map" style="width: 100%; height: 300px; border-radius: 0.5rem; box-shadow: 0 2px 8px rgba(0,0,0,0.1);"></div>
              <div style="margin-top: 0.5rem; text-align: center;">
                  <button onclick="openInGoogleMaps(<%= campaign.locationDetails.coordinates.lat %>, <%= campaign.locationDetails.coordinates.lng %>)" 
                          style="background: #4285f4; color: white; border: none; padding: 0.5rem 1rem; border-radius: 0.25rem; cursor: pointer; font-size: 0.9rem; display: inline-flex; align-items: center; gap: 0.5rem;">
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                          <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                          <circle cx="12" cy="10" r="3"></circle>
                      </svg>
                      Ouvrir dans Google Maps
                  </button>
              </div>
          </div>
      </div>
      <% } %>
  </div>

  <div class="slots-section">
      <h2 class="slots-title">Créneaux disponibles :</h2>

      <% if (slots && slots.length > 0) { %>
          <% 
          // Organiser les créneaux par jour
          const slotsByDay = {};
          slots.forEach(slot => {
              const dayStr = slot.day.toLocaleDateString('fr-FR');
              if (!slotsByDay[dayStr]) {
                  slotsByDay[dayStr] = [];
              }
              slotsByDay[dayStr].push(slot);
          });
          %>

          <% Object.keys(slotsByDay).forEach(day => { %>
              <div class="day-section">
                  <div class="day-header">
                      <svg class="day-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                      </svg>
                      <h3 class="day-title"><%= day %></h3>
                  </div>
                  
                  <div class="slots-grid">
                      <% slotsByDay[day].forEach(slot => { 
                          const available = slot.maxPeople - slot.reserved;
                          const isFull = available <= 0;
                      %>
                          <div class="slot-item">
                              <div class="slot-info">
                                  <svg class="time-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                  </svg>
                                  <span class="slot-time"><%= slot.startTime %> - <%= slot.endTime %></span>
                                  <span class="slot-availability <%= isFull ? 'full' : '' %>">
                                      Places restantes: <%= available %>/<%= slot.maxPeople %>
                                  </span>
                              </div>
                              
                              <% if (!isFull) { %>
                                  <button type="button" class="slot-button btn-reserve" onclick="reserveSlot('<%= slot._id %>')">
                                      Réserver
                                  </button>
                              <% } else { %>
                                  <span class="slot-button btn-full">Complet</span>
                              <% } %>
                          </div>
                      <% }) %>
                  </div>
              </div>
          <% }) %>
      <% } else { %>
          <div class="empty-slots">
              <svg class="empty-slots-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
              <h3>Aucun créneau disponible</h3>
              <p>Il n'y a actuellement aucun créneau disponible pour cette campagne.</p>
          </div>
      <% } %>
  </div>

  <div class="back-section">
      <a href="/api/campaigns" class="back-button">
          Retour à la liste
      </a>
  </div>
</div>

<% if (campaign.locationDetails && campaign.locationDetails.coordinates.lat && campaign.locationDetails.coordinates.lng) { %>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBmzfx8_O84TGrH7fYd8lJiGiYfvxYzi40"></script>
<script>
function initMap() {
    const location = {
        lat: <%= campaign.locationDetails.coordinates.lat %>,
        lng: <%= campaign.locationDetails.coordinates.lng %>
    };
    
    const map = new google.maps.Map(document.getElementById('map'), {
        zoom: 15,
        center: location,
        mapTypeId: 'roadmap',
        zoomControl: true,
        streetViewControl: true,
        mapTypeControl: true,
        fullscreenControl: true
    });
    
    const marker = new google.maps.Marker({
        position: location,
        map: map,
        title: '<%= campaign.location %>',
        icon: {
            url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="#dc3545">
                    <path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7z"/>
                    <circle cx="12" cy="9" r="2.5" fill="white"/>
                </svg>
            `),
            scaledSize: new google.maps.Size(32, 32),
            anchor: new google.maps.Point(16, 32)
        }
    });
    
    const infoWindow = new google.maps.InfoWindow({
        content: `
            <div style="padding: 10px;">
                <h3 style="margin: 0 0 10px 0; color: #dc3545;"><%= campaign.title %></h3>
                <p style="margin: 0; color: #666;"><%= campaign.location %></p>
                <p style="margin: 5px 0 0 0; font-size: 0.9em; color: #999;">
                    <%= campaign.startDate.toLocaleDateString('fr-FR') %> - <%= campaign.endDate.toLocaleDateString('fr-FR') %>
                </p>
            </div>
        `
    });
    
    marker.addListener('click', function() {
        infoWindow.open(map, marker);
    });
}

// Initialiser la carte quand la page est chargée
if (typeof google !== 'undefined') {
    initMap();
} else {
    window.addEventListener('load', initMap);
}

// Fonction pour ouvrir dans Google Maps
function openInGoogleMaps(lat, lng) {
    const url = `https://www.google.com/maps?q=${lat},${lng}`;
    window.open(url, '_blank');
}

// Fonction pour réserver un slot avec gestion d'erreur via popup
async function reserveSlot(slotId) {
    try {
        const response = await fetch(`/api/appointments/slots/${slotId}/reserve`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            credentials: 'include'
        });

        if (response.ok) {
            // Redirection vers les rendez-vous en cas de succès
            window.location.href = '/api/appointments';
        } else {
            // Récupérer le message d'erreur
            const errorText = await response.text();
            showErrorModal(errorText);
        }
    } catch (error) {
        console.error('Erreur lors de la réservation:', error);
        showErrorModal('Une erreur est survenue lors de la réservation. Veuillez réessayer.');
    }
}

// Fonction pour afficher le modal d'erreur
function showErrorModal(message) {
    // Créer le modal
    const modal = document.createElement('div');
    modal.id = 'errorModal';
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
        animation: fadeIn 0.3s ease;
    `;

    const modalContent = document.createElement('div');
    modalContent.style.cssText = `
        background: white;
        padding: 2rem;
        border-radius: 1rem;
        max-width: 500px;
        width: 90%;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        animation: slideUp 0.3s ease;
        text-align: center;
    `;

    modalContent.innerHTML = `
        <div style="color: #dc3545; margin-bottom: 1rem;">
            <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="margin: 0 auto;">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="15" y1="9" x2="9" y2="15"></line>
                <line x1="9" y1="9" x2="15" y2="15"></line>
            </svg>
        </div>
        <h3 style="color: #2d3748; margin-bottom: 1rem; font-size: 1.25rem; font-weight: 600;">
            Réservation impossible
        </h3>
        <p style="color: #4a5568; margin-bottom: 2rem; line-height: 1.6;">
            ${message}
        </p>
        <button onclick="closeErrorModal()" style="
            background: #dc3545;
            color: white;
            border: none;
            padding: 0.75rem 2rem;
            border-radius: 0.5rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        " onmouseover="this.style.background='#c82333'" onmouseout="this.style.background='#dc3545'">
            Compris
        </button>
    `;

    modal.appendChild(modalContent);
    document.body.appendChild(modal);

    // Ajouter les styles d'animation
    const style = document.createElement('style');
    style.textContent = `
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        @keyframes slideUp {
            from { 
                opacity: 0;
                transform: translateY(30px) scale(0.9);
            }
            to { 
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }
    `;
    document.head.appendChild(style);
}

// Fonction pour fermer le modal
function closeErrorModal() {
    const modal = document.getElementById('errorModal');
    if (modal) {
        modal.style.animation = 'fadeOut 0.3s ease';
        setTimeout(() => {
            modal.remove();
        }, 300);
    }
}

// Style pour l'animation de fermeture
document.addEventListener('DOMContentLoaded', function() {
    const style = document.createElement('style');
    style.textContent += `
        @keyframes fadeOut {
            from { opacity: 1; }
            to { opacity: 0; }
        }
    `;
    document.head.appendChild(style);
});
</script>
<% } %>